[workspace]
resolver = "2"
members = [
    "crates/ultrafast-mcp",
    "crates/ultrafast-mcp-core",
    "crates/ultrafast-mcp-transport",
    "crates/ultrafast-mcp-server",
    "crates/ultrafast-mcp-client",
    "crates/ultrafast-mcp-cli",
    "crates/ultrafast-mcp-auth",
    "crates/ultrafast-mcp-monitoring",
    "crates/ultrafast-mcp-test-utils",
    "examples/01-basic-echo",
    "examples/02-file-operations",
    "examples/03-everything-server",
    "examples/04-authentication-example",
    "tests/integration-test-suite",
]

# Workspace-wide profile configurations
[profile.dev]
opt-level = 0
debug = true
split-debuginfo = "unpacked"
debug-assertions = true
overflow-checks = true
lto = false
panic = "unwind"
codegen-units = 256
incremental = true

[profile.release]
opt-level = 3
debug = false
split-debuginfo = "packed"
debug-assertions = false
overflow-checks = false
lto = "thin"
panic = "unwind"
codegen-units = 16
incremental = false

[profile.test]
opt-level = 0
debug = true
split-debuginfo = "unpacked"
debug-assertions = true
overflow-checks = true
lto = false
codegen-units = 256
incremental = true

[profile.bench]
opt-level = 3
debug = false
split-debuginfo = "packed"
debug-assertions = false
overflow-checks = false
lto = "thin"
codegen-units = 16
incremental = false

[workspace.package]
version = "202506018.1.0-rc.2"
edition = "2021"
license = "MIT OR Apache-2.0"
repository = "https://github.com/techgopal/ultrafast-mcp"
homepage = "https://ultrafast-mcp.com"
documentation = "https://docs.rs/ultrafast-mcp"
authors = ["ULTRAFAST_MCP Team <team@ultrafast-mcp.com>"]
keywords = [
    "mcp-protocol", "model-context-protocol", "llm", "ai", "json-rpc", "async", "transport", "server", "client", "openai", "chatgpt", "nlp", "rust"
]
categories = [
    "api-bindings", "asynchronous", "network-programming", "web-programming", "command-line-utilities", "parsing"
]
readme = "README.md"
description = "UltraFast MCP - High-performance Model Context Protocol implementation in Rust"

[workspace.dependencies]
# Core runtime dependencies
tokio = { version = "1.46", features = ["macros", "rt-multi-thread", "net", "time", "sync", "io-util", "io-std", "signal", "process"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
anyhow = "1.0"
thiserror = "2.0"
futures = "0.3"
async-trait = "0.1"
uuid = { version = "1.17", features = ["v4", "serde"] }

# HTTP transport and networking
axum = "0.8"
reqwest = { version = "0.12", features = ["json"] }
tower = { version = "0.5", features = ["util"] }
tower-http = { version = "0.6", features = ["cors", "trace"] }
hyper = "1.6"
hyper-util = { version = "0.1", features = ["tokio"] }
axum-extra = "0.10"
bytes = "1.10"

# Authentication and security
oauth2 = "5.0"
jsonwebtoken = "9.3"
base64 = "0.22"
url = "2.5"
rand = "0.9"
sha2 = "0.10"

# CLI and user interface
clap = { version = "4.5", features = ["derive"] }
clap_complete = "4.5"
console = "0.16"
indicatif = "0.18"
colored = "3.0"
dirs = "6.0"

# Logging and tracing
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }

# Testing and benchmarking (dev-dependencies only)
criterion = { version = "0.6", features = ["html_reports"] }
tokio-test = "0.4"
tempfile = "3.20"

# JSON Schema and validation
schemars = { version = "1.0", features = ["uuid1"] }

# Monitoring and observability
opentelemetry = "0.30"
opentelemetry_sdk = { version = "0.30", features = ["rt-tokio"] }
opentelemetry-jaeger = { version = "0.22", features = ["rt-tokio"] }
opentelemetry-prometheus = "0.29"
opentelemetry-otlp = { version = "0.30", features = ["grpc-tonic", "tokio"] }
tracing-opentelemetry = "0.31"
metrics = "0.24"
metrics-exporter-prometheus = "0.17"
sysinfo = "0.36"
chrono = { version = "0.4", features = ["serde"] }

# Configuration and serialization
toml = "0.9"
serde_yaml = "0.9"

# Text processing and utilities
regex = "1.11"
lazy_static = "1.5"
urlencoding = "2.1"
rand_distr = "0.5.1"
