[package]
name = "ultrafast-mcp"
version.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
documentation.workspace = true
authors.workspace = true
keywords.workspace = true
categories.workspace = true
description = "High-performance, ergonomic Model Context Protocol (MCP) implementation in Rust"

[dependencies]
# Core dependencies
ultrafast-mcp-core = { path = "../ultrafast-mcp-core" }
ultrafast-mcp-server = { path = "../ultrafast-mcp-server" }
ultrafast-mcp-client = { path = "../ultrafast-mcp-client" }
ultrafast-mcp-transport = { path = "../ultrafast-mcp-transport" }
ultrafast-mcp-auth = { path = "../ultrafast-mcp-auth" }

# Runtime dependencies
tokio = { workspace = true, features = ["full"] }
serde = { workspace = true }
serde_json = { workspace = true }
anyhow = { workspace = true }
thiserror = { workspace = true }
futures = { workspace = true }
async-trait = { workspace = true }

# HTTP transport
axum = { workspace = true, optional = true }
reqwest = { workspace = true, optional = true }
tower = { workspace = true, optional = true }
tower-http = { workspace = true, optional = true }

# Authentication
oauth2 = { workspace = true, optional = true }
jsonwebtoken = { workspace = true, optional = true }
base64 = { workspace = true, optional = true }
url = { workspace = true, optional = true }
rand = { workspace = true, optional = true }
sha2 = { workspace = true, optional = true }

# Performance optimizations
bytes = { workspace = true, optional = true }
smallvec = { workspace = true, optional = true }
dashmap = { workspace = true, optional = true }

# UUID generation
uuid = { workspace = true }

# Logging
tracing = { workspace = true }

# JSON Schema
schemars = { workspace = true, optional = true }

# Monitoring and observability
ultrafast-mcp-monitoring = { path = "../ultrafast-mcp-monitoring", optional = true }
opentelemetry = { workspace = true, optional = true }
opentelemetry_sdk = { workspace = true, optional = true }
tracing-opentelemetry = { workspace = true, optional = true }
metrics = { workspace = true, optional = true }
sysinfo = { workspace = true, optional = true }
chrono = { workspace = true, optional = true }

[features]
# Default features for basic MCP functionality
default = ["stdio-transport"]

# Transport implementations
stdio-transport = []
http-transport = [
    "dep:axum",
    "dep:reqwest", 
    "dep:tower",
    "dep:tower-http"
]

# Authentication and security
oauth = [
    "dep:oauth2",
    "dep:jsonwebtoken",
    "dep:base64",
    "dep:url",
    "dep:rand",
    "dep:sha2"
]

# Performance optimizations
performance = [
    "dep:bytes",
    "dep:smallvec",
    "dep:dashmap"
]

# Monitoring and observability
monitoring = [
    "dep:ultrafast-mcp-monitoring",
    "dep:opentelemetry",
    "dep:opentelemetry_sdk",
    "dep:tracing-opentelemetry",
    "dep:metrics",
    "dep:sysinfo",
    "dep:chrono"
]

# Schema generation
schema = ["dep:schemars"]

# Convenience feature combinations
web = ["http-transport", "oauth"]
enterprise = ["web", "performance", "monitoring", "schema"]
all = ["stdio-transport", "http-transport", "oauth", "performance", "monitoring", "schema"]

# Experimental features (unstable)
experimental = [] 