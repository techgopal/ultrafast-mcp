name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Test on multiple platforms and Rust versions (only on main/develop)
  test:
    name: Test (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            rust: beta
            target: x86_64-unknown-linux-gnu

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-targets --all-features

    - name: Build all crates
      run: cargo build --all-targets --all-features

    - name: Build examples
      run: cargo build --examples --all-features

  # Test with minimal features
  test-minimal:
    name: Test Minimal Features
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Test with minimal features
      run: |
        cargo test --no-default-features
        cargo test --features stdio-transport
        cargo test --features http-transport
        cargo test --features oauth

  # Documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: target/doc/

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  # Benchmarks (only on main branch)
  benchmarks:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Run benchmarks
      run: cargo bench --all-features --no-run

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/

  # Package validation (only on main branch)
  package:
    name: Package Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Validate packages
      run: |
        for crate in crates/*/; do
          if [ -f "$crate/Cargo.toml" ]; then
            echo "Validating package in $crate"
            cd "$crate"
            cargo package --allow-dirty
            cd ../..
          fi
        done

  # Publish to crates.io (only on release)
  publish:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [test, security, package]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Login to crates.io
      uses: actions-rs/cargo@v1
      with:
        command: login
        args: --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Publish crates in dependency order
      run: |
        # Publish in dependency order
        cd crates/ultrafast-mcp-core
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        sleep 30
        
        cd ../ultrafast-mcp-transport
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        sleep 30
        
        cd ../ultrafast-mcp-auth
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        sleep 30
        
        cd ../ultrafast-mcp-monitoring
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        sleep 30
        
        cd ../ultrafast-mcp-server
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        sleep 30
        
        cd ../ultrafast-mcp-client
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        sleep 30
        
        cd ../ultrafast-mcp-macros
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        sleep 30
        
        cd ../ultrafast-mcp-cli
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        sleep 30
        
        cd ../ultrafast-mcp
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Deploy documentation (only on release)
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [publish]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        destination_dir: .
        force_orphan: true 