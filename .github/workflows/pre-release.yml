name: Pre-Release Validation

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to validate (e.g., 202506018.1.0-rc.1.6)'
        required: true
        type: string
      dry_run:
        description: 'Dry run mode (no actual publishing)'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  # Validate version format and consistency
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # Check if version matches semver format
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Version must follow semver format: MAJOR.MINOR.PATCH[-PRERELEASE][+BUILD]"
          exit 1
        fi
        
        echo "✅ Version format is valid: $VERSION"

    - name: Check version consistency
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # Check workspace version
        WORKSPACE_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
        if [ "$WORKSPACE_VERSION" != "$VERSION" ]; then
          echo "❌ Version mismatch: workspace has $WORKSPACE_VERSION, but validating $VERSION"
          exit 1
        fi
        
        echo "✅ Workspace version matches: $VERSION"
        
        # Check all crates use workspace inheritance
        for crate in crates/*/; do
          if [ -f "$crate/Cargo.toml" ]; then
            if ! grep -q "version.workspace = true" "$crate/Cargo.toml"; then
              echo "❌ Crate $crate does not use workspace version inheritance"
              exit 1
            fi
            echo "✅ $crate uses workspace version inheritance"
          fi
        done

  # Check if version already exists on crates.io
  check-crates-io:
    name: Check Crates.io Availability
    runs-on: ubuntu-latest
    needs: [validate-version]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Login to crates.io
      uses: actions-rs/cargo@v1
      with:
        command: login
        args: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Check version availability
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # List of crates to check
        CRATES=(
          "ultrafast-mcp-core"
          "ultrafast-mcp-auth"
          "ultrafast-mcp-transport"
          "ultrafast-mcp-monitoring"
          "ultrafast-mcp-server"
          "ultrafast-mcp-client"
          "ultrafast-mcp-macros"
          "ultrafast-mcp-cli"
          "ultrafast-mcp"
        )
        
        for crate in "${CRATES[@]}"; do
          echo "Checking $crate@$VERSION..."
          
          # Use cargo search to check if version exists
          if cargo search "$crate" --limit 10 | grep -q "$VERSION"; then
            echo "❌ Version $VERSION already exists for $crate"
            exit 1
          else
            echo "✅ $crate@$VERSION is available"
          fi
        done
        
        echo "✅ All versions are available for publishing"

  # Dry run package validation
  dry-run-package:
    name: Dry Run Package Validation
    runs-on: ubuntu-latest
    needs: [validate-version, check-crates-io]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Dry run package creation
      run: |
        # Test package creation for each crate
        for crate in crates/*/; do
          if [ -f "$crate/Cargo.toml" ]; then
            echo "Creating package for $crate..."
            cd "$crate"
            cargo package --allow-dirty
            cd ../..
            echo "✅ Package created for $crate"
          fi
        done
        
        # Test main crate
        echo "Creating package for main crate..."
        cargo package --allow-dirty
        echo "✅ Package created for main crate"

  # Build and test validation
  build-test-validation:
    name: Build and Test Validation
    runs-on: ubuntu-latest
    needs: [validate-version]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Build all crates
      run: |
        cargo build --all-targets --all-features

    - name: Run tests
      run: |
        cargo test --all-targets --all-features

    - name: Run clippy
      run: |
        cargo clippy --all-targets --all-features -- -D warnings

    - name: Security audit
      run: |
        cargo install cargo-audit
        cargo audit

  # Generate release summary
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [validate-version, check-crates-io, dry-run-package, build-test-validation]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        VERSION="${{ github.event.inputs.version }}"
        DRY_RUN="${{ github.event.inputs.dry_run }}"
        
        echo "## Pre-Release Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "**Mode:** $([ "$DRY_RUN" = "true" ] && echo "Dry Run" || echo "Live Release")" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job results
        if [ "${{ needs.validate-version.result }}" = "success" ]; then
          echo "✅ **Version Validation:** PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Version Validation:** FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.check-crates-io.result }}" = "success" ]; then
          echo "✅ **Crates.io Availability:** PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Crates.io Availability:** FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.dry-run-package.result }}" = "success" ]; then
          echo "✅ **Package Creation:** PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Package Creation:** FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build-test-validation.result }}" = "success" ]; then
          echo "✅ **Build & Tests:** PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build & Tests:** FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall result
        if [ "${{ needs.validate-version.result }}" = "success" ] && \
           [ "${{ needs.check-crates-io.result }}" = "success" ] && \
           [ "${{ needs.dry-run-package.result }}" = "success" ] && \
           [ "${{ needs.build-test-validation.result }}" = "success" ]; then
          echo "🎉 **Overall Result:** READY FOR RELEASE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All validation checks passed. The version is ready for release." >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Overall Result:** NOT READY FOR RELEASE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Some validation checks failed. Please fix the issues before releasing." >> $GITHUB_STEP_SUMMARY
        fi 