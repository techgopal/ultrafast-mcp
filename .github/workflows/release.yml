name: Release

on:
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Validate release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Verify version consistency
      run: |
        # Check that all crates have the same version
        WORKSPACE_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
        echo "Expected version: $WORKSPACE_VERSION"
        
        # Verify workspace package version
        WORKSPACE_PACKAGE_VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
        if [ "$WORKSPACE_PACKAGE_VERSION" != "$WORKSPACE_VERSION" ]; then
          echo "Workspace package version mismatch: expected $WORKSPACE_VERSION, got $WORKSPACE_PACKAGE_VERSION"
          exit 1
        fi
        
        # Check that all crates use workspace inheritance
        for crate in crates/*/; do
          if [ -f "$crate/Cargo.toml" ]; then
            if ! grep -q "version.workspace = true" "$crate/Cargo.toml"; then
              echo "Crate $crate does not use workspace version inheritance"
              exit 1
            fi
            echo "âœ“ $crate uses workspace version inheritance"
          fi
        done

    - name: Run full test suite
      run: cargo test --all-targets --all-features

    - name: Security audit
      run: |
        cargo install cargo-audit
        cargo audit

    - name: Validate packages
      run: |
        for crate in crates/*/; do
          if [ -f "$crate/Cargo.toml" ]; then
            echo "Validating package in $crate"
            cd "$crate"
            cargo check --all-features
            cargo check --no-default-features
            cd ../..
          fi
        done

  # Check if versions already exist on crates.io
  check-versions:
    name: Check Version Availability
    runs-on: ubuntu-latest
    needs: [validate]
    outputs:
      versions-exist: ${{ steps.check.outputs.versions-exist }}
      existing-crates: ${{ steps.check.outputs.existing-crates }}
      new-crates: ${{ steps.check.outputs.new-crates }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Login to crates.io
      uses: actions-rs/cargo@v1
      with:
        command: login
        args: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Check if versions already exist
      id: check
      run: |
        WORKSPACE_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
        echo "Checking version: $WORKSPACE_VERSION"
        
        # Initialize arrays to track which crates exist and which don't
        EXISTING_CRATES=""
        NEW_CRATES=""
        
        # Check each crate individually (excluding the main ultrafast-mcp crate)
        for crate in crates/*/; do
          if [ -f "$crate/Cargo.toml" ]; then
            CRATE_NAME=$(grep '^name = ' "$crate/Cargo.toml" | cut -d'"' -f2)
            # Validate crate name is not empty and skip the main crate (handled separately)
            if [ -n "$CRATE_NAME" ] && [ "$CRATE_NAME" != "" ] && [ "$CRATE_NAME" != "ultrafast-mcp" ]; then
              echo "Checking $CRATE_NAME@$WORKSPACE_VERSION"
              
              # Try to get crate info - if it fails, version doesn't exist
              if cargo search "$CRATE_NAME" --limit 1 | grep -q "$WORKSPACE_VERSION"; then
                echo "Version $WORKSPACE_VERSION already exists for $CRATE_NAME - will skip"
                EXISTING_CRATES="$EXISTING_CRATES $CRATE_NAME"
              else
                echo "Version $WORKSPACE_VERSION is new for $CRATE_NAME - will publish"
                NEW_CRATES="$NEW_CRATES $CRATE_NAME"
              fi
            elif [ "$CRATE_NAME" = "ultrafast-mcp" ]; then
              echo "Skipping main crate $CRATE_NAME in loop (will check separately)"
            else
              echo "Warning: Invalid crate name found in $crate/Cargo.toml"
            fi
          fi
        done
        
        # Check main crate (ultrafast-mcp in crates/ultrafast-mcp)
        if [ -f "crates/ultrafast-mcp/Cargo.toml" ]; then
          MAIN_CRATE_NAME=$(grep '^name = ' crates/ultrafast-mcp/Cargo.toml | cut -d'"' -f2)
          # Validate main crate name is not empty
          if [ -n "$MAIN_CRATE_NAME" ] && [ "$MAIN_CRATE_NAME" != "" ]; then
            echo "Checking $MAIN_CRATE_NAME@$WORKSPACE_VERSION"
            if cargo search "$MAIN_CRATE_NAME" --limit 1 | grep -q "$WORKSPACE_VERSION"; then
              echo "Version $WORKSPACE_VERSION already exists for $MAIN_CRATE_NAME - will skip"
              EXISTING_CRATES="$EXISTING_CRATES $MAIN_CRATE_NAME"
            else
              echo "Version $WORKSPACE_VERSION is new for $MAIN_CRATE_NAME - will publish"
              NEW_CRATES="$NEW_CRATES $MAIN_CRATE_NAME"
            fi
          else
            echo "Warning: Invalid main crate name found in crates/ultrafast-mcp/Cargo.toml"
          fi
        else
          echo "Warning: Main crate Cargo.toml not found at crates/ultrafast-mcp/Cargo.toml"
        fi
        
        # Clean up the output strings (remove leading spaces and normalize)
        EXISTING_CRATES=$(echo "$EXISTING_CRATES" | sed 's/^ *//;s/ *$//' | tr ' ' '\n' | grep -v '^$' | tr '\n' ' ' | sed 's/ *$//')
        NEW_CRATES=$(echo "$NEW_CRATES" | sed 's/^ *//;s/ *$//' | tr ' ' '\n' | grep -v '^$' | tr '\n' ' ' | sed 's/ *$//')
        
        # Set outputs for use in other jobs
        echo "existing-crates=$EXISTING_CRATES" >> $GITHUB_OUTPUT
        echo "new-crates=$NEW_CRATES" >> $GITHUB_OUTPUT
        
        if [ -n "$NEW_CRATES" ]; then
          echo "Some crates need publishing: $NEW_CRATES"
          echo "versions-exist=false" >> $GITHUB_OUTPUT
        else
          echo "All crates already exist - nothing to publish"
          echo "versions-exist=true" >> $GITHUB_OUTPUT
        fi



  # Publish to crates.io with dependency-based ordering
  publish-leaf-crates:
    name: Publish Leaf Crates
    runs-on: ubuntu-latest
    needs: [validate, check-versions]
    if: always() && needs.check-versions.outputs.versions-exist == 'false'
    strategy:
      matrix:
        crate: ['ultrafast-mcp-core', 'ultrafast-mcp-monitoring']
        include:
          - crate: ultrafast-mcp-core
            path: crates/ultrafast-mcp-core
          - crate: ultrafast-mcp-monitoring
            path: crates/ultrafast-mcp-monitoring

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Login to crates.io
      uses: actions-rs/cargo@v1
      with:
        command: login
        args: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Check if crate needs publishing
      id: check-crate
      run: |
        if echo "${{ needs.check-versions.outputs.existing-crates }}" | grep -w "${{ matrix.crate }}" > /dev/null; then
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "Skipping ${{ matrix.crate }} - version already exists"
        else
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "Publishing ${{ matrix.crate }} - version is new"
        fi

    - name: Publish leaf crate
      if: steps.check-crate.outputs.skip != 'true'
      run: |
        echo "Publishing ${{ matrix.crate }}..."
        cd ${{ matrix.path }}
        
        # Add retry logic with exponential backoff
        max_attempts=3
        attempt=1
        base_delay=30
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          
          if cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}; then
            echo "Successfully published ${{ matrix.crate }}"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "Failed to publish ${{ matrix.crate }} after $max_attempts attempts"
              exit 1
            fi
            
            delay=$((base_delay * attempt))
            echo "Publish failed, waiting $delay seconds before retry..."
            sleep $delay
            attempt=$((attempt + 1))
          fi
        done

    - name: Skip leaf crate
      if: steps.check-crate.outputs.skip == 'true'
      run: |
        echo "Skipping ${{ matrix.crate }} - version already exists on crates.io"

  publish-level-1:
    name: Publish Level 1 Dependencies
    runs-on: ubuntu-latest
    needs: [publish-leaf-crates, check-versions]
    if: always() && needs.publish-leaf-crates.result == 'success'
    strategy:
      matrix:
        crate: ['ultrafast-mcp-auth']
        include:
          - crate: ultrafast-mcp-auth
            path: crates/ultrafast-mcp-auth

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Wait for leaf crates
      run: |
        echo "Waiting for leaf crates to be available..."
        sleep 60

    - name: Login to crates.io
      uses: actions-rs/cargo@v1
      with:
        command: login
        args: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Check if crate needs publishing
      id: check-crate
      run: |
        if echo "${{ needs.check-versions.outputs.existing-crates }}" | grep -w "${{ matrix.crate }}" > /dev/null; then
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "Skipping ${{ matrix.crate }} - version already exists"
        else
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "Publishing ${{ matrix.crate }} - version is new"
        fi

    - name: Publish level 1 crate
      if: steps.check-crate.outputs.skip != 'true'
      run: |
        echo "Publishing ${{ matrix.crate }}..."
        cd ${{ matrix.path }}
        
        max_attempts=3
        attempt=1
        base_delay=30
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          
          if cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}; then
            echo "Successfully published ${{ matrix.crate }}"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "Failed to publish ${{ matrix.crate }} after $max_attempts attempts"
              exit 1
            fi
            
            delay=$((base_delay * attempt))
            echo "Publish failed, waiting $delay seconds before retry..."
            sleep $delay
            attempt=$((attempt + 1))
          fi
        done

    - name: Skip level 1 crate
      if: steps.check-crate.outputs.skip == 'true'
      run: |
        echo "Skipping ${{ matrix.crate }} - version already exists on crates.io"

  publish-level-2:
    name: Publish Level 2 Dependencies
    runs-on: ubuntu-latest
    needs: [publish-level-1, check-versions]
    if: always() && needs.publish-level-1.result == 'success'
    strategy:
      matrix:
        crate: ['ultrafast-mcp-transport']
        include:
          - crate: ultrafast-mcp-transport
            path: crates/ultrafast-mcp-transport

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Wait for level 1 crates
      run: |
        echo "Waiting for level 1 crates to be available..."
        sleep 60

    - name: Login to crates.io
      uses: actions-rs/cargo@v1
      with:
        command: login
        args: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Check if crate needs publishing
      id: check-crate
      run: |
        if echo "${{ needs.check-versions.outputs.existing-crates }}" | grep -w "${{ matrix.crate }}" > /dev/null; then
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "Skipping ${{ matrix.crate }} - version already exists"
        else
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "Publishing ${{ matrix.crate }} - version is new"
        fi

    - name: Publish level 2 crate
      if: steps.check-crate.outputs.skip != 'true'
      run: |
        echo "Publishing ${{ matrix.crate }}..."
        cd ${{ matrix.path }}
        
        max_attempts=3
        attempt=1
        base_delay=30
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          
          if cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}; then
            echo "Successfully published ${{ matrix.crate }}"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "Failed to publish ${{ matrix.crate }} after $max_attempts attempts"
              exit 1
            fi
            
            delay=$((base_delay * attempt))
            echo "Publish failed, waiting $delay seconds before retry..."
            sleep $delay
            attempt=$((attempt + 1))
          fi
        done

    - name: Skip level 2 crate
      if: steps.check-crate.outputs.skip == 'true'
      run: |
        echo "Skipping ${{ matrix.crate }} - version already exists on crates.io"

  publish-level-3:
    name: Publish Level 3 Dependencies
    runs-on: ubuntu-latest
    needs: [publish-level-2, check-versions]
    if: always() && needs.publish-level-2.result == 'success'
    strategy:
      matrix:
        crate: ['ultrafast-mcp-server', 'ultrafast-mcp-client']
        include:
          - crate: ultrafast-mcp-server
            path: crates/ultrafast-mcp-server
          - crate: ultrafast-mcp-client
            path: crates/ultrafast-mcp-client

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Wait for level 2 crates
      run: |
        echo "Waiting for level 2 crates to be available..."
        sleep 60

    - name: Login to crates.io
      uses: actions-rs/cargo@v1
      with:
        command: login
        args: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Check if crate needs publishing
      id: check-crate
      run: |
        if echo "${{ needs.check-versions.outputs.existing-crates }}" | grep -w "${{ matrix.crate }}" > /dev/null; then
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "Skipping ${{ matrix.crate }} - version already exists"
        else
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "Publishing ${{ matrix.crate }} - version is new"
        fi

    - name: Publish level 3 crate
      if: steps.check-crate.outputs.skip != 'true'
      run: |
        echo "Publishing ${{ matrix.crate }}..."
        cd ${{ matrix.path }}
        
        max_attempts=3
        attempt=1
        base_delay=30
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          
          if cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}; then
            echo "Successfully published ${{ matrix.crate }}"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "Failed to publish ${{ matrix.crate }} after $max_attempts attempts"
              exit 1
            fi
            
            delay=$((base_delay * attempt))
            echo "Publish failed, waiting $delay seconds before retry..."
            sleep $delay
            attempt=$((attempt + 1))
          fi
        done

    - name: Skip level 3 crate
      if: steps.check-crate.outputs.skip == 'true'
      run: |
        echo "Skipping ${{ matrix.crate }} - version already exists on crates.io"

  publish-top-level:
    name: Publish Top-Level Crate
    runs-on: ubuntu-latest
    needs: [publish-level-3, check-versions]
    if: always() && needs.publish-level-3.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Wait for level 3 crates
      run: |
        echo "Waiting for level 3 crates to be available..."
        sleep 60

    - name: Login to crates.io
      uses: actions-rs/cargo@v1
      with:
        command: login
        args: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Check if crate needs publishing
      id: check-crate
      run: |
        if echo "${{ needs.check-versions.outputs.existing-crates }}" | grep -w "ultrafast-mcp" > /dev/null; then
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "Skipping ultrafast-mcp - version already exists"
        else
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "Publishing ultrafast-mcp - version is new"
        fi

    - name: Publish top-level crate
      if: steps.check-crate.outputs.skip != 'true'
      run: |
        echo "Publishing ultrafast-mcp..."
        cd crates/ultrafast-mcp
        
        max_attempts=3
        attempt=1
        base_delay=30
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          
          if cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}; then
            echo "Successfully published ultrafast-mcp"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "Failed to publish ultrafast-mcp after $max_attempts attempts"
              exit 1
            fi
            
            delay=$((base_delay * attempt))
            echo "Publish failed, waiting $delay seconds before retry..."
            sleep $delay
            attempt=$((attempt + 1))
          fi
        done

    - name: Skip top-level crate
      if: steps.check-crate.outputs.skip == 'true'
      run: |
        echo "Skipping ultrafast-mcp - version already exists on crates.io"

  publish-cli:
    name: Publish CLI Crate
    runs-on: ubuntu-latest
    needs: [publish-top-level, check-versions]
    if: always() && needs.publish-top-level.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Wait for top-level crate
      run: |
        echo "Waiting for top-level crate to be available..."
        sleep 60

    - name: Login to crates.io
      uses: actions-rs/cargo@v1
      with:
        command: login
        args: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    - name: Check if crate needs publishing
      id: check-crate
      run: |
        if echo "${{ needs.check-versions.outputs.existing-crates }}" | grep -w "ultrafast-mcp-cli" > /dev/null; then
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "Skipping ultrafast-mcp-cli - version already exists"
        else
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "Publishing ultrafast-mcp-cli - version is new"
        fi

    - name: Publish CLI crate
      if: steps.check-crate.outputs.skip != 'true'
      run: |
        echo "Publishing ultrafast-mcp-cli..."
        cd crates/ultrafast-mcp-cli
        
        max_attempts=3
        attempt=1
        base_delay=30
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          
          if cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}; then
            echo "Successfully published ultrafast-mcp-cli"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "Failed to publish ultrafast-mcp-cli after $max_attempts attempts"
              exit 1
            fi
            
            delay=$((base_delay * attempt))
            echo "Publish failed, waiting $delay seconds before retry..."
            sleep $delay
            attempt=$((attempt + 1))
          fi
        done

    - name: Skip CLI crate
      if: steps.check-crate.outputs.skip == 'true'
      run: |
        echo "Skipping ultrafast-mcp-cli - version already exists on crates.io"

  # Verify installation
  verify-installation:
    name: Verify Installation
    runs-on: ubuntu-latest
    needs: [publish-cli]

    steps:
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Test installation
      run: |
        # Wait for crates to be available (increased wait time)
        echo "Waiting for crates to be available on crates.io..."
        sleep 300  # 5 minutes
        
        # Test installing the CLI with retry logic
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts to install CLI"
          
          if cargo install ultrafast-mcp-cli; then
            echo "Successfully installed CLI"
            break
          else
            if [ $attempt -eq $max_attempts ]; then
              echo "Failed to install CLI after $max_attempts attempts"
              exit 1
            fi
            
            echo "Install failed, waiting 60 seconds before retry..."
            sleep 60
            attempt=$((attempt + 1))
          fi
        done
        
        # Test basic functionality
        mcp --help 