name: Nightly

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  # Nightly build and test
  nightly-build:
    name: Nightly Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Run tests with nightly
      run: cargo test --all-targets --all-features

    - name: Run benchmarks
      run: cargo bench --all-features

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: nightly-benchmarks
        path: target/criterion/

  # Dependency updates
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-edit
      run: cargo install cargo-edit

    - name: Check for outdated dependencies
      run: |
        cargo outdated --root-deps-only --exit-code 1 || true

    - name: Update dependencies
      run: |
        # Update workspace dependencies
        cargo update
        
        # Check if any updates are available
        if cargo outdated --root-deps-only --exit-code 1; then
          echo "Dependencies are up to date"
        else
          echo "Some dependencies can be updated"
          # This could be extended to automatically update minor versions
        fi

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Check for known vulnerabilities
      run: |
        # This could be extended to create issues for vulnerabilities
        cargo audit --json | jq -r '.vulnerabilities[]?.advisory.id' || true

  # Performance regression testing
  performance:
    name: Performance Regression Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Run performance tests
      run: |
        # Run benchmarks and save results
        cargo bench --all-features -- --save-baseline nightly
        
        # Compare with previous baseline if available
        if [ -f "target/criterion/.criterion-cache/nightly" ]; then
          echo "Performance baseline saved"
        fi

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: target/criterion/

  # Documentation generation
  docs-nightly:
    name: Generate Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Generate documentation
      run: cargo doc --no-deps --all-features

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: nightly-docs
        path: target/doc/

  # Code quality metrics
  code-quality:
    name: Code Quality Metrics
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Run clippy with all checks
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Count lines of code
      run: |
        echo "Lines of Rust code:"
        find . -name "*.rs" -not -path "./target/*" | xargs wc -l | tail -1
        
        echo "Lines of documentation:"
        find . -name "*.md" -not -path "./target/*" | xargs wc -l | tail -1

    - name: Check for TODO/FIXME comments
      run: |
        echo "TODO/FIXME comments found:"
        grep -r "TODO\|FIXME" src/ || echo "No TODO/FIXME comments found" 