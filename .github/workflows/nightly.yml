name: Nightly Builds

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Multi-platform testing with nightly Rust
  test-multi-platform:
    name: Multi-Platform Test (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [nightly, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            rust: nightly
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            rust: beta
            target: x86_64-unknown-linux-gnu

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: nightly-${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows dependencies if needed
        echo "Windows dependencies installed"

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS dependencies if needed
        echo "macOS dependencies installed"

    - name: Install rustfmt for beta toolchain
      if: matrix.rust == 'beta'
      run: rustup component add rustfmt

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-targets --all-features

    - name: Build all crates
      run: cargo build --all-targets --all-features

    - name: Build examples
      run: cargo build --examples --all-features

  # Test with minimal features on multiple platforms
  test-minimal-multi-platform:
    name: Minimal Features (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: nightly-minimal-${{ matrix.os }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Test with minimal features
      run: |
        cargo test --no-default-features
        cargo test --features stdio-transport
        cargo test --features http-transport
        cargo test --features oauth

  # Performance benchmarks with nightly
  benchmarks-nightly:
    name: Nightly Benchmarks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: nightly-benchmarks-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Run benchmarks
      run: cargo bench --all-features --no-run

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: nightly-benchmark-results
        path: target/criterion/

  # Documentation with nightly features
  docs-nightly:
    name: Nightly Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: nightly-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nightly-documentation
        path: target/doc/ 